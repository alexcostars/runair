/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package projetotao;

import com.toedter.calendar.JTextFieldDateEditor;
import java.awt.AWTKeyStroke;
import java.awt.Component;
import java.awt.KeyboardFocusManager;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.HashSet;
import java.util.Set;
import javax.swing.AbstractAction;
import javax.swing.JPanel;
import javax.swing.KeyStroke;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author guiarrd
 */
public class TelaAbrirEvento extends javax.swing.JFrame {

    /**
     * Creates new form AbrirEvento
     */
    public TelaAbrirEvento() {
        initComponents();
        setLocationRelativeTo(null);

        considerarEnterComoTab(JTF_troco_por_caixa);
        
        //Calendario nativo do java para mecher com a data atual
        Calendar cal = Calendar.getInstance();//JDC_DataInicial.getCurrent();
        //pega o dia atual
        int day = cal.get(Calendar.DATE);
        //pega o dia de amanhã
        int next_day = day + 1;
        //pega o mês atual (tem que ser +1 porque janeiro começa em 0
        int month = cal.get(Calendar.MONTH) + 1;
        //pega o ano atual
        int year = cal.get(Calendar.YEAR);
        String mes = null;

        if (day < 10) {
            String dia = "0" + day;
            day = Integer.parseInt(dia);
        }

        if (month < 10) {

            mes = "0" + month;
            month = Integer.parseInt(mes);

        }

        //Adiciona um KeyStroke no botão Abrir Evento e verifica se a tecla pressionada for a letra "A" do teclado
        JB_Abrir_Evento.getInputMap(JPanel.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, 0), "abrir");
        //Se for a letra "A", coloca uma ação de clique no botão e executa o que está no método actionPerformed
        JB_Abrir_Evento.getActionMap().put("abrir", new AbstractAction() {

            @Override
            public void actionPerformed(ActionEvent a) {

                abrirEvento(); //método para abrir evento

            }
        });

        JB_Cancelar.getInputMap(JPanel.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), "cancelar");
        //Se for a tecla ESC, coloca uma ação de clique no botão e executa o que está no método actionPerformed
        JB_Cancelar.getActionMap().put("cancelar", new AbstractAction() {

            @Override
            public void actionPerformed(ActionEvent a) {

                dispose(); //método para fechar janela

            }
        });

        JB_MarcarTodos.getInputMap(JPanel.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke(KeyEvent.VK_F1, 0), "marcar");
        //Se for a letra "M", coloca uma ação de clique no botão e executa o que está no método actionPerformed
        JB_MarcarTodos.getActionMap().put("marcar", new AbstractAction() {

            @Override
            public void actionPerformed(ActionEvent a) {

                marcarTodos(); //método para marcar todos produtos

            }
        });

        try {

            atualizar(); //popular e atualizar tabela

        } catch (Exception se) {

            System.out.println("Erro: " + se.toString());

        }

        JDC_DataInicial.setCalendar(cal);
        JDC_DataFinal.setCalendar(cal);
        ((JTextFieldDateEditor) JDC_DataInicial.getDateEditor()).setEditable(false);
        ((JTextFieldDateEditor) JDC_DataFinal.getDateEditor()).setEditable(false);
        //aumentar tamanho das linhas da tabela
        JT_Listar_Produtos.setRowHeight(30);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        JL_Data_Inicio = new javax.swing.JLabel();
        JL_Data_Fim = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        JT_Listar_Produtos = new javax.swing.JTable();
        JB_Abrir_Evento = new javax.swing.JButton();
        JB_Cancelar = new javax.swing.JButton();
        JDC_DataInicial = new com.toedter.calendar.JDateChooser();
        JDC_DataFinal = new com.toedter.calendar.JDateChooser();
        JB_MarcarTodos = new javax.swing.JButton();
        JTF_troco_por_caixa = new javax.swing.JTextField();
        JL_Data_Fim1 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        JTF_NomeEvento = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        JTF_LugarEvento = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        JL_Data_Inicio.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        JL_Data_Inicio.setText("Data Início:");

        JL_Data_Fim.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        JL_Data_Fim.setText("Data Fim:");

        JT_Listar_Produtos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Código", "Quantidade", "Descrição", "Valor", "Liberar Venda"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        JT_Listar_Produtos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                JT_Listar_ProdutosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(JT_Listar_Produtos);

        JB_Abrir_Evento.setIcon(new javax.swing.ImageIcon(getClass().getResource("/projetotao/check.png"))); // NOI18N
        JB_Abrir_Evento.setText("Abrir Evento");
        JB_Abrir_Evento.setToolTipText("Pressione ENTER para ABRIR EVENTO");
        JB_Abrir_Evento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JB_Abrir_EventoActionPerformed(evt);
            }
        });

        JB_Cancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/projetotao/delete.png"))); // NOI18N
        JB_Cancelar.setText("Cancelar");
        JB_Cancelar.setToolTipText("Pressione ESC para Cancelar");
        JB_Cancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JB_CancelarActionPerformed(evt);
            }
        });

        JDC_DataInicial.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        JDC_DataFinal.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        JB_MarcarTodos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/projetotao/check_box.png"))); // NOI18N
        JB_MarcarTodos.setText("Marcar/Desmarcar");
        JB_MarcarTodos.setToolTipText("Pressione F1 para MARCAR TODOS");
        JB_MarcarTodos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JB_MarcarTodosActionPerformed(evt);
            }
        });

        JTF_troco_por_caixa.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        JTF_troco_por_caixa.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        JTF_troco_por_caixa.setText("0.0");
        JTF_troco_por_caixa.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                JTF_troco_por_caixaFocusGained(evt);
            }
        });

        JL_Data_Fim1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        JL_Data_Fim1.setText("Troco por caixa:");

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("Nome do Evento:");

        JTF_NomeEvento.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel2.setText("Local do Evento:");

        JTF_LugarEvento.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(JL_Data_Inicio)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(JDC_DataInicial, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 45, Short.MAX_VALUE)
                        .addComponent(JL_Data_Fim)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(JDC_DataFinal, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(43, 43, 43)
                        .addComponent(JL_Data_Fim1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(JTF_troco_por_caixa, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(JB_Abrir_Evento)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(JB_Cancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(JB_MarcarTodos))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(JTF_NomeEvento))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(JTF_LugarEvento)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(JDC_DataFinal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(JL_Data_Inicio, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE)
                        .addComponent(JDC_DataInicial, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(JL_Data_Fim, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(JTF_troco_por_caixa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(JL_Data_Fim1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(JTF_NomeEvento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(JTF_LugarEvento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(JB_Abrir_Evento, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(JB_Cancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(JB_MarcarTodos, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void JB_CancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JB_CancelarActionPerformed

        dispose(); //fechar a janela sem fechar o programa todo

    }//GEN-LAST:event_JB_CancelarActionPerformed

    private void JB_Abrir_EventoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JB_Abrir_EventoActionPerformed

        abrirEvento();

    }//GEN-LAST:event_JB_Abrir_EventoActionPerformed

    private void JT_Listar_ProdutosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_JT_Listar_ProdutosMouseClicked


    }//GEN-LAST:event_JT_Listar_ProdutosMouseClicked

    private void JB_MarcarTodosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JB_MarcarTodosActionPerformed

        marcarTodos();

    }//GEN-LAST:event_JB_MarcarTodosActionPerformed

    private void JTF_troco_por_caixaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_JTF_troco_por_caixaFocusGained

        JTF_troco_por_caixa.setText("");

    }//GEN-LAST:event_JTF_troco_por_caixaFocusGained

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {

            java.util.logging.Logger.getLogger(TelaAbrirEvento.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TelaAbrirEvento.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TelaAbrirEvento.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaAbrirEvento.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TelaAbrirEvento().setVisible(true);
            }
        });

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton JB_Abrir_Evento;
    private javax.swing.JButton JB_Cancelar;
    private javax.swing.JButton JB_MarcarTodos;
    private com.toedter.calendar.JDateChooser JDC_DataFinal;
    private com.toedter.calendar.JDateChooser JDC_DataInicial;
    private javax.swing.JLabel JL_Data_Fim;
    private javax.swing.JLabel JL_Data_Fim1;
    private javax.swing.JLabel JL_Data_Inicio;
    private javax.swing.JTextField JTF_LugarEvento;
    private javax.swing.JTextField JTF_NomeEvento;
    private javax.swing.JTextField JTF_troco_por_caixa;
    private javax.swing.JTable JT_Listar_Produtos;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    //Variáveis para fazer conexão com o banco (poderia ter usado a classe CoreSql)
    private Connection con;
    private Statement st;
    private ResultSet rs;
    private DefaultTableModel dtm;
    private Boolean liberar_venda;
    private Produto prod = new Produto(1);

    //metodo atualizar tabela
    public void atualizar() throws SQLException, ClassNotFoundException {

        //pega o modelo da tabela
        dtm = (DefaultTableModel) JT_Listar_Produtos.getModel();
        //conexão
        Class.forName("com.mysql.jdbc.Driver");
        con = DriverManager.getConnection(new CoreSql().db_conexao);
        st = con.createStatement();

        try {

            //executar sql
            rs = st.executeQuery("SELECT b_produtos.id, b_produto_estoques.quantidade, b_produtos.descricao, b_produtos.valor_venda, b_produtos.liberar_venda FROM b_produtos, b_produto_estoques WHERE b_produtos.id = b_produto_estoques.produto_id ORDER BY b_produtos.id;");
            limpaTabela();
            while (rs.next()) {
                //de acordo com o valor do campo liberar_venda da tabela, cria a linha com o checkbox marcado ou nao  
                if (Integer.parseInt(rs.getString("liberar_venda")) == 1) {
                    liberar_venda = true;
                } else {
                    liberar_venda = false;
                }
                //cria linha
                dtm.addRow(new Object[]{rs.getString("id"), rs.getString("quantidade"), rs.getString("descricao"), rs.getString("valor_venda"), liberar_venda});
            }
            st.close();
            con.close();

        } catch (Exception ex) {
            System.out.println("Erro: " + ex.toString());

        }
    }

    //metodo para remover todas as linhas da tabela e dar efeito de atualizacao
    public void limpaTabela() {
        //Se a tabela está preenchida ela limpa
        if (dtm.getRowCount() != 0) { //se tiver linhas na tabela
            //Limpa tabela
            JT_Listar_Produtos.selectAll();//seleciona todas
            int[] l = JT_Listar_Produtos.getSelectedRows();
            for (int i = (l.length - 1); i >= 0; i--) {
                dtm.removeRow(l[i]); //remove tudo uma por vez ate o for terminar
            }
        }
    }

    private void produtosSelecionadosParaEvento(int linha) {

        //pega o código que está na linha passada por parâmetro, na coluna 0 da tabela
        String codigo = (String) JT_Listar_Produtos.getValueAt(linha, 0);
        //pega a descricao que está na linha passada por parâmetro, na coluna 1
        String descricao = (String) JT_Listar_Produtos.getValueAt(linha, 2);
        //pega o valor_venda que está na linha passada por parâmetro, na coluna 2
        String valor_venda = (String) JT_Listar_Produtos.getValueAt(linha, 3);
        //pega o liberar_venda que está na linha passada por parâmetro, na coluna 3
        Boolean liberar_venda = (Boolean) JT_Listar_Produtos.getValueAt(linha, 4);

        //atribui os valores às variáveis do produto
        prod.codigo = Integer.parseInt(codigo);
        prod.descricao = descricao;
        prod.valor_venda = Double.parseDouble(valor_venda);
        prod.liberar_venda = liberar_venda;
        //atualiza no banco de dados
        prod.atualizaInformacoesDB();

    }

    private void abrirEvento() {

        Evento e = new Evento(); //novo evento
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        String dataInicial = sdf.format(JDC_DataInicial.getDate());
        String dataFinal = sdf.format(JDC_DataFinal.getDate());
        e.setPeriodo(dataInicial, dataFinal); //definir data inicial e final do evento
        e.setTrocoPorCaixa(Double.parseDouble(JTF_troco_por_caixa.getText().replace(",", ".")));
        e.setNome(JTF_NomeEvento.getText());
        e.setLugar(JTF_LugarEvento.getText());
        String descricao = "", valor_venda = "", codigo = "", nome_evento = ""; //variáveis auxiliares

        //for para manipular as linhas da tabela
        for (int i = 0; i < JT_Listar_Produtos.getRowCount(); i++) {

            //se o produto que está na linha selecionada estiver liberado para venda
            if ((boolean) JT_Listar_Produtos.getValueAt(i, 4)) {

                //separa ele para vender
                produtosSelecionadosParaEvento(i);
            } else {

                //senão deixa ele fora da venda
                produtosSelecionadosParaEvento(i);
            }
        }
        e.novoEvento();
        new TelaVenderProduto().setVisible(true); //chamar a tela de venda de produto
        dispose();
    }
    private Boolean marcados = false;

    public void marcarTodos() {

        int linhas = JT_Listar_Produtos.getRowCount();
        if (marcados == false) {

            for (int i = 0; i < linhas; i++) {

                JT_Listar_Produtos.setValueAt(true, i, 4);
                marcados = true;

            }

        } else {

            for (int i = 0; i < linhas; i++) {

                JT_Listar_Produtos.setValueAt(false, i, 4);
                marcados = false;

            }

        }

    }

    public static void considerarEnterComoTab(Component comp) {

        Set<AWTKeyStroke> keystrokes = comp.getFocusTraversalKeys(KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS);
        Set<AWTKeyStroke> newKeystrokes = new HashSet<AWTKeyStroke>(keystrokes);
        newKeystrokes.add(AWTKeyStroke.getAWTKeyStroke(KeyEvent.VK_ENTER, 0));
        comp.setFocusTraversalKeys(KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS, newKeystrokes);

    }

}
