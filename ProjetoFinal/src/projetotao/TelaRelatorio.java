/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package projetotao;

import com.itextpdf.text.Document;
import com.itextpdf.text.Image;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfWriter;
import java.awt.Desktop;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileOutputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Locale;
import javax.swing.AbstractAction;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.KeyStroke;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author AlexCosta
 */
public class TelaRelatorio extends javax.swing.JFrame {

    /**
     * Creates new form Relatorio
     */
    public TelaRelatorio() {
        initComponents();
        setLocationRelativeTo(null);

        JB_Gerar.getInputMap(JPanel.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, 0), "gerar");
        //Se for a letra "A", coloca uma ação de clique no botão e executa o que está no método actionPerformed
        JB_Gerar.getActionMap().put("gerar", new AbstractAction() {

            @Override
            public void actionPerformed(ActionEvent a) {

                gerar();

            }
        });

        JB_Excluir.getInputMap(JPanel.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke(KeyEvent.VK_DELETE, 0), "excluir");
        //Se for a letra "A", coloca uma ação de clique no botão e executa o que está no método actionPerformed
        JB_Excluir.getActionMap().put("excluir", new AbstractAction() {

            @Override
            public void actionPerformed(ActionEvent a) {

                excluir();

            }
        });

        eventosDisponiveis();
        JT_Eventos.setRowHeight(30);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        JB_Gerar = new javax.swing.JButton();
        JB_Excluir = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        JT_Eventos = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        JB_Gerar.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        JB_Gerar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/projetotao/relatorio.png"))); // NOI18N
        JB_Gerar.setText("Gerar");
        JB_Gerar.setToolTipText("Pressione ENTER para GERAR RELATÓRIO");
        JB_Gerar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JB_GerarActionPerformed(evt);
            }
        });

        JB_Excluir.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        JB_Excluir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/projetotao/delete.png"))); // NOI18N
        JB_Excluir.setText("Excluir");
        JB_Excluir.setToolTipText("Pressione DEL para EXCLUIR");
        JB_Excluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JB_ExcluirActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel2.setText("Gerar Relatório");

        JT_Eventos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Código", "Data Início", "Data Fim", "Nome", "Local"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(JT_Eventos);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(329, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(320, 320, 320))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(JB_Gerar, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(JB_Excluir)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(JB_Gerar, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(JB_Excluir, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void JB_GerarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JB_GerarActionPerformed

        gerar();

    }//GEN-LAST:event_JB_GerarActionPerformed

    public String GerarRentabilidade(int evento_id) throws SQLException, ClassNotFoundException {
        String relatorio = "";
        Class.forName("com.mysql.jdbc.Driver");
        con = DriverManager.getConnection(new CoreSql().db_conexao);
        st = con.createStatement();

        double valor_total_compra = 0;
        double valor_total_venda = 0;

        try {
            rs = st.executeQuery("SELECT b_ticket.produto_id, b_ticket.valor_venda, b_produtos.descricao, b_produtos.valor_compra FROM b_ticket LEFT JOIN b_produtos ON b_ticket.produto_id = b_produtos.id where b_ticket.evento_id = " + evento_id + ";");
            while (rs.next()) {
                valor_total_compra += Double.parseDouble(rs.getString("valor_compra"));
                valor_total_venda += Double.parseDouble(rs.getString("valor_venda"));
            }
            st.close();
            con.close();
        } catch (Exception ex) {
            System.out.println("Erro: " + ex.toString());
        }

        relatorio = "Valor compra total: R$ " + d.format(valor_total_compra) + "\nValor venda total: R$ " + d.format(valor_total_venda) + "\nRentabilidade: R$ " + d.format(valor_total_venda - valor_total_compra);
        //System.out.println(relatorio);
        return relatorio;
    }

    public String GerarRelatorioPorUsuario(int evento_id) throws SQLException, ClassNotFoundException {

        Evento ev = new Evento(evento_id);
        double troco_por_caixa = ev.getTrocoPorCaixa();
        //System.out.println("troco por caixa: " + troco_por_caixa);

        String relatorio = "";
        Class.forName("com.mysql.jdbc.Driver");
        con = DriverManager.getConnection(new CoreSql().db_conexao);
        st = con.createStatement();

        Usuario[] usuarios_que_venderam = new Usuario[10000];
        int cont_usuarios_que_venderam = 0;
        try {
            rs = st.executeQuery("SELECT DISTINCT(usuario_id) FROM b_ticket WHERE excluido <> 1 and evento_id = " + evento_id + ";");
            while (rs.next()) {
                usuarios_que_venderam[cont_usuarios_que_venderam] = new Usuario(Integer.parseInt(rs.getString("usuario_id")));
                cont_usuarios_que_venderam++;
            }
            st.close();
            con.close();
        } catch (Exception ex) {
            System.out.println("Erro: " + ex.toString());
        }

        for (int cont = 0; cont < cont_usuarios_que_venderam; cont++) {
            relatorio += "\nUsuário: " + usuarios_que_venderam[cont].login + "\n";
            double quanto_o_usuario_vendeu_em_dinheiro = 0;

            try {
                con = DriverManager.getConnection(new CoreSql().db_conexao);
                st = con.createStatement();
                rs = st.executeQuery("SELECT produto_id, usuario_id, COUNT(produto_id), SUM(valor_venda) FROM b_ticket WHERE usuario_id = " + usuarios_que_venderam[cont].codigo + " and evento_id = " + evento_id + " group by produto_id;");
                while (rs.next()) {
                    Produto p = new Produto(Integer.parseInt(rs.getString("produto_id")));
                    relatorio += p.descricao + ": " + rs.getString("COUNT(produto_id)") + " unidades\n";
                    quanto_o_usuario_vendeu_em_dinheiro += Double.parseDouble(rs.getString("SUM(valor_venda)"));
                }
                st.close();
                con.close();
            } catch (Exception ex) {
                System.out.println("Erro: " + ex.toString());
            }

            relatorio += "Caixa: R$ " + d.format(quanto_o_usuario_vendeu_em_dinheiro) + "\n";
            relatorio += "Troco do caixa: R$ " + d.format(troco_por_caixa) + "\n";
            relatorio += "Valor final: R$ " + d.format(quanto_o_usuario_vendeu_em_dinheiro + troco_por_caixa) + "\n";

        }

        //System.out.println("Incio do relatorio\n---------------------------" + relatorio);
        return relatorio;
    }

    private void JB_ExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JB_ExcluirActionPerformed

        excluir();

    }//GEN-LAST:event_JB_ExcluirActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TelaRelatorio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TelaRelatorio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TelaRelatorio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaRelatorio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TelaRelatorio().setVisible(true);

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton JB_Excluir;
    private javax.swing.JButton JB_Gerar;
    private javax.swing.JTable JT_Eventos;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    private DefaultTableModel dtm;
    private Connection con;
    private Statement st;
    private ResultSet rs;

    private void eventosDisponiveis() {

        dtm = (DefaultTableModel) JT_Eventos.getModel();
        try {

            Class.forName("com.mysql.jdbc.Driver");
            con = DriverManager.getConnection(new CoreSql().db_conexao);
            st = con.createStatement();

        } catch (Exception e) {

            System.out.println("Erro: " + e.toString());

        }
        //executar sql
        try {

            rs = st.executeQuery("SELECT * FROM b_eventos ORDER BY id DESC");
            limpaTabela();
            while (rs.next()) {
                String[] datas = formataData(rs.getString("data_inicio"), rs.getString("data_fim"));
                //cria linha
                dtm.addRow(new Object[]{rs.getString("Id"), datas[0], datas[1], rs.getString("nome_evento"), rs.getString("lugar_evento")});

            }

            st.close();
            con.close();

        } catch (Exception e) {

            System.out.println("Erro: " + e.toString());

        }
    }

    private void limpaTabela() {
        //Se a tabela está preenchida ela limpa
        if (dtm.getRowCount() != 0) { //se tiver linhas na tabela
            //Limpa tabela
            JT_Eventos.selectAll();//seleciona todas
            int[] l = JT_Eventos.getSelectedRows();
            for (int i = (l.length - 1); i >= 0; i--) {
                dtm.removeRow(l[i]); //remove tudo uma por vez ate o for terminar
            }
        }
    }

    private String[] formataData(String dataInicial, String dataFinal) {

        String[] resultado = new String[2];

        if (dataInicial.contains("-")) {

            String[] dInicio = dataInicial.split("-");
            String[] dFim = dataFinal.split("-");
            String dataInicio = dInicio[2] + "/" + dInicio[1] + "/" + dInicio[0];
            String dataFim = dFim[2] + "/" + dFim[1] + "/" + dFim[0];
            resultado[0] = dataInicio;
            resultado[1] = dataFim;

        } else {

            String[] dInicio = dataInicial.split("/");
            String[] dFim = dataFinal.split("/");
            String dataInicio = dInicio[2] + "-" + dInicio[1] + "-" + dInicio[0];
            String dataFim = dFim[2] + "-" + dFim[1] + "-" + dFim[0];
            resultado[0] = dataInicio;
            resultado[1] = dataFim;

        }

        return resultado;

    }

    private void gerar() {

        //Criando documento a partir da biblioteca IText que foi importada
        Document documento = new Document();
        String usuario = System.getProperty("user.name");

        try {

            //Cria um objeto PDFWriter para gerar arquivos PDF
            //Adiciona neste objeto o documento anterior e um FileOutputStream que vai salvar o pdf
            //no caminho que foi passado por parâmetros (nesse caso, vai salvar dentro do projeto)
//            String dataRel = String.valueOf(JDC_DataInicial.getDate());
//            dataRel = dataRel.replaceAll("/","-");
            int linha = JT_Eventos.getSelectedRow();
            int evento_id = Integer.parseInt((String) JT_Eventos.getValueAt(linha, 0));
            String nome_evento = (String) JT_Eventos.getValueAt(linha, 3), lugar_evento = (String) JT_Eventos.getValueAt(linha, 4);
            Evento e = new Evento(evento_id);
            String dataInicial = (String) JT_Eventos.getValueAt(linha, 1);
            String dataFinal = (String) JT_Eventos.getValueAt(linha, 2);
            String datas[] = formataData(dataInicial, dataFinal);

            String nome_arquivo = System.getProperty("user.home") + "\\Desktop\\relatorio_";

            DateFormat dateFormat = new SimpleDateFormat("dd_MM_yyyy-HH_mm_ss");
            Calendar cal = Calendar.getInstance();
            nome_arquivo += dateFormat.format(cal.getTime()) + ".pdf";

            PdfWriter pdf = PdfWriter.getInstance(documento, new FileOutputStream(nome_arquivo));
            //abre o documento
            documento.open();
            //definir tamanho das páginas do PDF como A4 (melhor pra imprimir depois)
            documento.setPageSize(PageSize.A4);
            //Image i = Image.getInstance("logo_tao.jpg");
            //i.scaleToFit(495, 200);
//            i.setAlignment(Image.ALIGN_CENTER);
//            documento.add(i);
            Locale locale = new Locale("pt", "BR");
            GregorianCalendar calendar = new GregorianCalendar();
            SimpleDateFormat formatador = new SimpleDateFormat("dd' de 'MMMMM' de 'yyyy' - 'HH':'mm'h'", locale);
            System.out.println(formatador.format(calendar.getTime()));
            Boolean aberto = e.situacaoEvento();
            Paragraph title = new Paragraph("RELATÓRIO DE VENDAS (GERADO EM " + formatador.format(calendar.getTime()) + ")\nCÓDIGO DO EVENTO: " + evento_id + "NOME DO EVENTO: " + nome_evento + " " + lugar_evento + "  - DIA: " + dataInicial);

            title.setAlignment(Paragraph.ALIGN_CENTER);
            documento.add(title);

            Paragraph p = new Paragraph();
            String relatorio = "";

            relatorio += "\n-------------------------------------------------------------------------------------------------------------------------------\n";
            relatorio += GerarRelatorioPorUsuario(evento_id);
            relatorio += "\n-------------------------------------------------------------------------------------------------------------------------------\n";
            relatorio += GerarRentabilidade(evento_id);
            relatorio += "\n\n-------------------------------------------------------------------------------------------------------------------------------\n";
            p.add(relatorio);
            p.setAlignment(Paragraph.ALIGN_LEFT);
            documento.add(p);

            //fecha o documento
            documento.close();
            JOptionPane.showMessageDialog(null, "Relatório gerado com sucesso!", "Concluído", JOptionPane.INFORMATION_MESSAGE);

            Desktop dt = Desktop.getDesktop();
            dt.open(new File(nome_arquivo));

        } catch (Exception ex) {

            //System.out.println("Erro no PDF: " + ex.toString());
            JOptionPane.showMessageDialog(null, "Erro ao gerar o relatório!", "Erro", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();

        }

    }

    private void excluir() {

        Boolean selecionado = false;
        int l = JT_Eventos.getRowCount();
        for (int i = 0; i < l; i++) {

            if (JT_Eventos.isRowSelected(i)) {
                selecionado = true;
            }

        }

        if (selecionado) {

            int linha = JT_Eventos.getSelectedRow();
            int evento_id = Integer.parseInt((String) JT_Eventos.getValueAt(linha, 0));
            System.out.println("EVENTO_ID: " + evento_id);
            Evento e = new Evento(evento_id);
            if (e.getAberto()) {

                JOptionPane.showMessageDialog(null, "Não é possível excluir um evento aberto", "Atenção", JOptionPane.ERROR_MESSAGE);

            } else {
                CoreSql c = new CoreSql();
                String sql = "DELETE FROM b_eventos WHERE id = " + evento_id + ";";
                c.executarQuery(sql, false, null);
                JOptionPane.showMessageDialog(null, "Evento excluído!");
                eventosDisponiveis();
                
            }

        } else {

            JOptionPane.showMessageDialog(null, "Selecione uma linha para excluir!", "Atenção!", JOptionPane.ERROR_MESSAGE);

        }

    }

    DecimalFormat d = new DecimalFormat("R$ ####,##0.00");

    //Usuario u;
}
